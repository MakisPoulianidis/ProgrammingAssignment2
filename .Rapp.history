x
solve(x)
x<-matrix(rnorm(200),20, 10)
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, mean)
apply(x,0, mean)
apply(x,200, mean)
apply(x,1, quantile, probs=c(0.25, 075))
apply(x, 1, quantile, probs=c(0.25, 075))
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.25, 0.75))
a <-array(rnorm(2*2*10), c(2,2,10))
a
apply(a, c(1,2), mean)
rowmeans(a, dims=2)
rowMeans(a, dims=2)
mapply(rep, 1:4, 4:1)
noise(5,1,2)
noise(1:5,1:5,2)
??noise
noise <- function(n,mean,sd{rnorm(n,mean,sd)})
noise <- function(n,mean,sd){rnorm(n,mean,sd)})
noise <- function(n,mean,sd)
rnorm(n,mean,sd)
noise(5,1,2)
?rnorm
noise(1:5, 1:5,2)
mapply(moise, 1:5, 1:5,2)
mapply(noise, 1:5, 1:5,2)
?tapply
x <-c(rnorm(10), runif(10), rnorm(10,1))
x
f <-gl(3,10)
f
tapply(x, f, mean)
?gl
tapply(x, f, mean, simplify=FALSE)
tapply(x, f, range)
x <-c(rnorm(10), runif(10), rnorm(10,1))
f <-gl(3,10)
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <-split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[, c"Ozone", "Solar.R", "Wind"]))
lapply(s, function(x) colMeans(x[, c"(Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
x <-rnorm(10)
x
f1 <- g1(2,5)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop=TRUE))
?interaction
log(-1)
log(NA)
log(NaN)
log(0)
log(inf)
printmessage <- function(x) {}
printmessage <- function(x) {if(x>0) print"x is greater than zero") else print("x is less than or equal to zero") invisible(x)}
printmessage <- function(x) {if(x>0) print()"x is greater than zero") else print("x is less than or equal to zero") invisible(x)}
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") invisible(x)}
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") invisible(x) }
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") }
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") invisible(x)}
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") invisible (x)}
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") invisible}
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") }
x <1
x<-1
printmessage(x)
x<--1
printmessage(x)
printmessage <- function(x) {if(x>0) print("x is greater than zero") else print("x is less than or equal to zero") }
x<-NA
printmessage(x)
printmessage2(x)
corr
ls()
corr
corr.R
corr ("test")
x<-corr
pollutantmean
pollutantmean (dad)
getwd()
dir
dir()
corr("specdata")
ls()
corr()
ls()
getwd()
dir
dir()
source(printmessage2)
source("printmessage2")
source("printmessage2.R")
printmessage(1)
printmessage(0)
printmessage(NA)
source(printmessage2.R)
source("printmessage2.R")
printmessage2(1
)
dir()
printmessage2(1)
source("printmessage2.R")
printmessage2(1)
printmessage2(0)
printmessage2(NA)
traceback(printmessag2)
traceback(printmessage2)
debug(printmessage2)
printmessage2(NA)
?debug
undebug(printmessage2)
printmessage2(NA)
mean(y)
traceback()
mean(x)
traceback()
lm(y-x)
traceback()
?lm
debug(lm)
lm(y-x)
n
undebug(lm)
options(error=recover)
read.csv("sfsf")
n
debug(ls)
ls
?ls
undebug(ls)
n
undebug(ls)
ls
undebug(ls)
?debug
undebug(ls)
debug(ls)
ls
ls()
n
undebug(ls)
debug(ls)
ls()
n
undebug(ls)
data(iris)
iris
?iris
Error: could not find function "corr"
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1], 2, mean)
apply(iris[, 1:1], 2, mean)
lapply(data$Petal.Width, mean)
apply(iris$Petal.Width, 2, mean)
apply(iris$Petal.Width, 1, mean)
iris$Sepal.Length
mean(iris$Sepal.Length)
l<-iris$Sepal.Length
colMeans(iris$Sepal.Length)
iris
s <-split(iris, iris$Species)
s
mean(s$Sepal.Length)
s
mean(s.s$Sepal.Length)
mean(s$Sepal.Length)
lapply(s, function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width")]))
data(mtcars)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, avg)
tapply(mtcars$mpg, mtcars$cyl, average)
tapply(mtcars$hp, mtcars$cyl, mean)
?average
?rbind
z<-tapply(mtcars$hp, mtcars$cyl, mean)
z
z$4
print(z)
class(z0)
class(z)
z(1)
z[1]
z[3]-z[1]
z[1]-z[3]
abs
?abs
abs(z[1]-z[3])
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?matrix
matrix(1:4, 2, 2)
m<-matrix(1:4, 2, 2)
ls()
dir()
source("cachematrix.R")
cachematrix()
makeCacheMatrix()
makeCacheMatrix(m)
solve(m)
source("cachematrix.R")
makeCacheMatrix(m)
cahceSolve(m)
cacheSolve(m)
source("cachematrix.R")
makeCacheMatrix(m)
makeCacheMatrix(1)
source("cachematrix.R")
makeCacheMatrix()
makeCacheMatrix(m)
makeCacheMatrix(m)
ls(m)
ls()
m<-matrix(1:9, 3, 3)
m
?get
get (n)
get (m)
?list
?set
function() m
?function() m
?list
source("cachematrix.R")
makeCacheMatrix()
